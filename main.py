import asyncio
import os
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, CallbackQuery
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter


class FSMFillForm(StatesGroup):
        obrsahenie = State()

# ==== –ù–ê–°–¢–†–û–ô–ö–ò ====
FAQ_FILE = "faq.txt"
BOT_TOKEN = ""  # –ó–∞–º–µ–Ω–∏
ADMIN_ID = 834553662           # –ó–∞–º–µ–Ω–∏

BASE_PHOTO_DIR = "photo_sections"
INFO_FILE = "section_info.txt"

SECTIONS = {
    "vneucheb": "–í–Ω–µ—É—á–µ–±–Ω–∞—è —Å–ª—É–∂–±–∞",
    "edu": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞",
    "press": "–ü—Ä–µ—Å—Å–∞",
    "food": "–°–ª—É–∂–±–∞ –ø–∏—Ç–∞–Ω–∏—è",
    "accom": "–°–ª—É–∂–±–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
    "members": "–°–ª—É–∂–±–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"
}

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AddInfo(StatesGroup):
    waiting_for_section = State()
    waiting_for_text = State()
    waiting_for_photos = State()




# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
router = Router()
section_data = {}

# === –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ===
def load_info():
    if os.path.exists(INFO_FILE):
        with open(INFO_FILE, "r", encoding="utf-8") as f:
            for line in f:
                key, text = line.strip().split("||", 1)
                section_data[key] = text

def save_info():
    with open(INFO_FILE, "w", encoding="utf-8") as f:
        for key, text in section_data.items():
            f.write(f"{key}||{text}\n")

def get_photo_paths(section_id):
    folder = os.path.join(BASE_PHOTO_DIR, section_id)
    if not os.path.exists(folder):
        return []
    files = sorted(os.listdir(folder))
    return [os.path.join(folder, f) for f in files if f.lower().endswith((".jpg", ".jpeg", ".png"))]

# === –ö–Ω–æ–ø–∫–∏ ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã FAQ")],
        [KeyboardButton(text="üõ† –ë—ã—Ç–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")],
        [KeyboardButton(text="üì∏ –î–∏—Ä–µ–∫—Ü–∏—è")],
    ],
    resize_keyboard=True
)

def section_keyboard():
    kb = InlineKeyboardBuilder()
    for key, name in SECTIONS.items():
        kb.button(text=name, callback_data=f"section:{key}")
    kb.adjust(2)
    return kb.as_markup()


class SetFAQ(StatesGroup):
    waiting_for_text = State()

@router.message(Command("setfaq"))
async def set_faq(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    await message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ —Ü–µ–ª–∏–∫–æ–º:")
    await state.set_state(SetFAQ.waiting_for_text)

@router.message(SetFAQ.waiting_for_text)
async def save_faq_text(message: Message, state: FSMContext):
    with open(FAQ_FILE, "w", encoding="utf-8") as f:
        f.write(message.text.strip())

    await message.answer("‚úÖ FAQ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@router.message(CommandStart())
async def start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_kb)

@router.message(F.text == "üìã FAQ")
async def faq(message: Message):
    if os.path.exists(FAQ_FILE):
        with open(FAQ_FILE, "r", encoding="utf-8") as f:
            text = f.read().strip()
    else:
        text = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."

    await message.answer(text)

@router.message(F.text == "üõ† –ë—ã—Ç–æ–≤—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è")
async def household_prompt(message: Message, state: FSMContext):
    await message.answer("–û–ø–∏—à–∏—Ç–µ, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç. –ú—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É üëá")
    await state.set_state(FSMFillForm.obrsahenie)


@router.message(StateFilter(FSMFillForm.obrsahenie), lambda x: len(x.text.split())  >= 1)
async def forward_to_admin(message: Message, state: FSMContext):
    if message.text and message.text != "/start":
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        user = message.from_user
        await message.bot.send_message(
            ADMIN_ID,
            f"üì© –ë—ã—Ç–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.full_name}:\n\n{message.text}"
        )
    await state.clear()


@router.message(F.text == "üì∏ –ì–∞–ª–µ—Ä–µ—è")
async def gallery(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=section_keyboard())

@router.callback_query(F.data.startswith("section:"))
async def show_section(callback: CallbackQuery):
    section_id = callback.data.split(":")[1]
    name = SECTIONS.get(section_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    text = section_data.get(section_id, "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")

    await callback.message.answer(f"üìå <b>{name}</b>\n\n{text}", parse_mode="HTML")

    photo_paths = get_photo_paths(section_id)
    if not photo_paths:
        await callback.message.answer("‚ùå –§–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        return

    for path in photo_paths:
        try:
            await callback.message.answer_photo(FSInputFile(path))
        except Exception as e:
            await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {path}: {e}")
    await callback.answer()

# === –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞ ===
@router.message(Command("addinfo"))
async def add_info_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    kb = InlineKeyboardBuilder()
    for k, v in SECTIONS.items():
        kb.button(text=v, callback_data=f"admin_set:{k}")
    kb.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb.as_markup())
    await state.set_state(AddInfo.waiting_for_section)

@router.callback_query(F.data.startswith("admin_set:"), AddInfo.waiting_for_section)
async def admin_select_section(callback: CallbackQuery, state: FSMContext):
    section_id = callback.data.split(":")[1]
    await state.update_data(section_id=section_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è:")
    await state.set_state(AddInfo.waiting_for_text)
    await callback.answer()

@router.message(AddInfo.waiting_for_text)
async def admin_set_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É (JPG/PNG). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /done")
    await state.set_state(AddInfo.waiting_for_photos)

@router.message(AddInfo.waiting_for_photos, F.photo)
async def admin_save_photos(message: Message, state: FSMContext):
    data = await state.get_data()
    section_id = data["section_id"]
    folder = os.path.join(BASE_PHOTO_DIR, section_id)
    os.makedirs(folder, exist_ok=True)

    photo = message.photo[-1]
    count = len(os.listdir(folder)) + 1
    path = os.path.join(folder, f"{count}.jpg")
    file = await message.bot.get_file(photo.file_id)
    await message.bot.download_file(file_path=file.file_path, destination=path)

    await message.answer("üì∑ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

@router.message(Command("done"), AddInfo.waiting_for_photos)
async def admin_done_uploading(message: Message, state: FSMContext):
    data = await state.get_data()
    section_data[data["section_id"]] = data["text"]
    save_info()
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.clear()



# === –ó–∞–ø—É—Å–∫ ===
async def main():
    os.makedirs(BASE_PHOTO_DIR, exist_ok=True)
    load_info()

    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
