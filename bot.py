import asyncio
import os
import logging
import json
import signal
import sys
from pathlib import Path
from dotenv import load_dotenv
from typing import Optional, List

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery, InputMediaPhoto
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

BASE_DIR = Path(__file__).resolve().parent
load_dotenv(dotenv_path=BASE_DIR / '.env', override=True)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
    if not BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")
    else:
        logger.error(f"–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {BOT_TOKEN}")
    exit(1)
    
ADMIN_IDS = [834553662, 553588882, 2054326653, 1852003919, 966420322]

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
FAQ_FILE = BASE_DIR / "faq.txt"
MENU_FILE = BASE_DIR / "menu.txt"
INFO_FILE = BASE_DIR / "section_info.txt"
APPEALS_FILE = BASE_DIR / "appeals.txt"
PID_FILE = BASE_DIR / "bot.pid"
PHOTO_DATA_FILE = BASE_DIR / "photo_data.json"

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞
MAPS_DIR = BASE_DIR / "maps"
MAPS_DIR.mkdir(exist_ok=True, parents=True)

PROGRAM_DIR = BASE_DIR / "program"
PROGRAM_DIR.mkdir(exist_ok=True, parents=True)

MENU_DIR = BASE_DIR / "menu"
MENU_DIR.mkdir(exist_ok=True, parents=True)

bot = None

# ===== –£–ü–†–û–©–ï–ù–ù–û–ï –•–†–ê–ù–ï–ù–ò–ï –§–û–¢–û =====
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
DEFAULT_PHOTO_DATA = {
    "sections": {},
    "program": [],
    "directorate": [],
    "map": None,
    "menu": None
}

def load_photo_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ç–æ"""
    try:
        if not PHOTO_DATA_FILE.exists():
            return DEFAULT_PHOTO_DATA.copy()
        
        with open(PHOTO_DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ photo_data: {e}")
        return DEFAULT_PHOTO_DATA.copy()

def save_photo_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ç–æ"""
    try:
        with open(PHOTO_DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è photo_data: {e}")
        return False

def update_photo_data(update_fn):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ç–æ"""
    data = load_photo_data()
    updated_data = update_fn(data)
    return save_photo_data(updated_data)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ
def set_program(file_id_list: List[str]) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–Ω—è"""
    def updater(data):
        data["program"] = file_id_list
        return data
    return update_photo_data(updater)

def add_section_photo(section_id: str, file_id: str) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ —Å–µ–∫—Ü–∏—é"""
    def updater(data):
        if "sections" not in data:
            data["sections"] = {}
        if section_id not in data["sections"]:
            data["sections"][section_id] = []
        data["sections"][section_id].append(file_id)
        return data
    return update_photo_data(updater)

def set_directorate(file_id_list: List[str]) -> bool:
    """–ü–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ü–∏–∏"""
    def updater(data):
        data["directorate"] = file_id_list
        return data
    return update_photo_data(updater)

def set_menu(file_id: str) -> bool:
    """–ó–∞–º–µ–Ω–∞ —Ñ–æ—Ç–æ –º–µ–Ω—é"""
    def updater(data):
        data["menu"] = file_id
        return data
    return update_photo_data(updater)

def set_map(file_id: str) -> bool:
    """–ó–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—ã"""
    def updater(data):
        data["map"] = file_id
        return data
    return update_photo_data(updater)

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò =====
async def save_media_file(file_id: str, directory: Path, filename: str) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫"""
    try:
        file = await bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        directory.mkdir(exist_ok=True, parents=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        dest_path = directory / filename
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await bot.download_file(file_path, dest_path)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
        return False

def get_media_file(directory: Path, filename: str) -> Optional[Path]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
    file_path = directory / filename
    return file_path if file_path.exists() else None

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class FSMFillForm(StatesGroup):
    obrsahenie = State()

class UploadDirectorPhotos(StatesGroup):
    waiting_for_photos = State()

class AddInfo(StatesGroup):
    waiting_for_section = State()
    waiting_for_text = State()
    waiting_for_photos = State()

class SetFAQ(StatesGroup):
    waiting_for_text = State()

class SetProgram(StatesGroup):
    waiting_for_photos = State()

# –°–µ–∫—Ü–∏–∏
SECTIONS = {
    "vneucheb": "–í–Ω–µ—É—á–µ–±–Ω–∞—è —Å–ª—É–∂–±–∞",
    "edu": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞",
    "food": "–°–ª—É–∂–±–∞ –ø–∏—Ç–∞–Ω–∏—è",
    "accom": "–°–ª—É–∂–±–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
    "members": "–°–ª—É–∂–±–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏",
    "directorate": "–î–∏—Ä–µ–∫—Ü–∏—è —Ñ–æ—Ä—É–º–∞",
    "partners": "–†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
    "event": "–ò–≤–µ–Ω—Ç —Å–ª—É–∂–±–∞ —Ñ–æ—Ä—É–º–∞",
    "tech": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞",
    "directorate_staff": "–®—Ç–∞–± –î–∏—Ä–µ–∫—Ü–∏–∏",
    "field": "–ü–æ–ª–µ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "protocol": "–ü—Ä–æ—Ç–æ–∫–æ–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞",
    "press_service": "–ü—Ä–µ—Å—Å-—Å–ª—É–∂–±–∞"
}

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
router = Router()
section_data = {}

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def load_info():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤"""
    if INFO_FILE.exists():
        try:
            with open(INFO_FILE, "r", encoding="utf-8") as f:
                for line in f:
                    parts = line.strip().split("||", 1)
                    if len(parts) == 2:
                        key, text = parts
                        section_data[key] = text
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è {len(section_data)} —Ä–∞–∑–¥–µ–ª–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–∏—Å–∞–Ω–∏–π: {e}")

def save_info():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤"""
    try:
        with open(INFO_FILE, "w", encoding="utf-8") as f:
            for key, text in section_data.items():
                f.write(f"{key}||{text}\n")
        logger.info(f"–û–ø–∏—Å–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {INFO_FILE}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏–π: {e}")
        return False

async def forward_to_admins(message: Message, text: str):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    try:
        with open(APPEALS_FILE, "a", encoding="utf-8") as f:
            f.write(f"{message.date.isoformat()}||{message.from_user.id}||{message.from_user.full_name}||{message.text}\n")
        
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, text)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        return False

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="üè° –ü–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ")],
        [KeyboardButton(text="üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–∏—Ä–µ–∫—Ü–∏–µ–π –§–æ—Ä—É–º–∞")],
        [KeyboardButton(text="üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="üçΩ –£–∑–Ω–∞—Ç—å, —á–µ–º —Å–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º—è—Ç")],
        [KeyboardButton(text="üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å")],
    ],
    resize_keyboard=True
)

def section_keyboard():
    kb = InlineKeyboardBuilder()
    for key, name in SECTIONS.items():
        kb.button(text=name, callback_data=f"section:{key}")
    kb.adjust(2)
    return kb.as_markup()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
@router.message(Command("setfaq"))
async def set_faq(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    await message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ —Ü–µ–ª–∏–∫–æ–º:")
    await state.set_state(SetFAQ.waiting_for_text)

@router.message(SetFAQ.waiting_for_text)
async def save_faq_text(message: Message, state: FSMContext):
    try:
        FAQ_FILE.write_text(message.text.strip(), encoding="utf-8")
        await message.answer("‚úÖ FAQ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FAQ: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å FAQ.")
    await state.clear()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–†–¢ =====
@router.message(Command("setmap"))
async def set_map_command(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    await message.answer("üìé –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã:")

@router.message(F.photo, Command("setmap"))
async def handle_map_photo(message: Message):
    try:
        file_id = message.photo[-1].file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if set_map(file_id):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if await save_media_file(file_id, MAPS_DIR, "current_map.jpg"):
                await message.answer("‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            else:
                await message.answer("‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã.")

@router.message(F.text == "üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É")
async def show_map(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—Ä—Ç–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        photo_data = load_photo_data()
        map_file_id = photo_data.get("map")
        
        if map_file_id:
            await message.answer_photo(
                map_file_id, 
                caption="–ö–∞—Ä—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ \"–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞\""
            )
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å –¥–∏—Å–∫–∞
            map_path = get_media_file(MAPS_DIR, "current_map.jpg")
            if map_path:
                with open(map_path, "rb") as map_file:
                    await message.answer_photo(
                        map_file, 
                        caption="–ö–∞—Ä—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ \"–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞\""
                    )
            else:
                await message.answer("‚ùå –ö–∞—Ä—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç—ã: {str(e)}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É.")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–û–ì–†–ê–ú–ú–´ =====
@router.message(Command("setprogram"))
async def set_program_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ
    for file in PROGRAM_DIR.glob("*"):
        try:
            file.unlink()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
    
    await state.update_data(file_ids=[])
    await message.answer("‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ—á–∏—â–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –æ–¥–Ω–æ–º—É. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done")
    await state.set_state(SetProgram.waiting_for_photos)

@router.message(SetProgram.waiting_for_photos, F.photo)
async def save_program_photo(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        file_ids = data.get("file_ids", [])
        file_id = message.photo[-1].file_id
        file_ids.append(file_id)
        await state.update_data(file_ids=file_ids)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞ –¥–∏—Å–∫
        index = len(file_ids)
        filename = f"program_{index}.jpg"
        if await save_media_file(file_id, PROGRAM_DIR, filename):
            await message.answer(f"‚úÖ –§–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã {index} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        else:
            await message.answer(f"‚úÖ –§–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã {index} –¥–æ–±–∞–≤–ª–µ–Ω–æ, –Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {str(e)}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")

@router.message(Command("done"), SetProgram.waiting_for_photos)
async def finish_program_upload(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        file_ids = data.get("file_ids", [])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        if set_program(file_ids):
            await message.answer(f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(file_ids)} —Ñ–æ—Ç–æ.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
    await state.clear()

@router.message(F.text == "üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å")
async def daily_program(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        photo_data = load_photo_data()
        file_ids = photo_data.get("program", [])
        
        if not file_ids:
            await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return

        media = []
        for i, file_id in enumerate(file_ids):
            if i == 0:
                media.append(InputMediaPhoto(
                    media=file_id,
                    caption="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å üåû"
                ))
            else:
                media.append(InputMediaPhoto(media=file_id))

        await message.answer_media_group(media)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")

# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@router.message(CommandStart())
async def start(message: Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –ø—Ä–∏—Ä–æ–¥—ã! üåø –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ —Ñ–æ—Ä—É–º–µ ¬´–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞. –ó–∞–ø–æ–≤–µ–¥–Ω—ã–π –∫—Ä–∞–π¬ª. "
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n\n"
        "üè° –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ–º —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–º –∂–∏–ª–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ\n"
        "üìù –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É\n"
        "üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤\n"
        "üçΩ –£–∑–Ω–∞—Ç—å, —á–µ–º —Å–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º—è—Ç\n"
        "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –¥–µ–Ω—å\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚Üì"
    )
    await message.answer(welcome_text, reply_markup=main_kb)

@router.message(F.text == "üìù –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
async def faq(message: Message):
    try:
        if FAQ_FILE.exists():
            text = FAQ_FILE.read_text(encoding="utf-8").strip()
        else:
            text = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."

        faq_text = (
            "–ó–¥–µ—Å—å –º—ã —Å–æ–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏, –≤–¥—Ä—É–≥ —Ç—ã –Ω–∞–π–¥–µ—à—å –∑–¥–µ—Å—å –æ—Ç–≤–µ—Ç –¥–ª—è —Å–µ–±—è:\n\n"
            f"{text}\n\n"
            "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏, —Ç–æ –∑–∞–¥–∞–π –µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º –∫–æ–º–∞–Ω–¥—ã"
        )
        await message.answer(faq_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAQ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ.")

@router.message(F.text == "üè° –ü–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ")
async def household_prompt(message: Message, state: FSMContext):
    comfort_text = (
        "–°—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π –ø–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é –∏–ª–∏ –±—ã—Ç—É? –ù–∞–ø–∏—à–∏ –Ω–∞–º, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º–µ:\n"
        "\"–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ—Å—å–±–∞/–æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –§–ò–û, –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã, –Ω–æ–º–µ—Ä –ø–∞–ª–∞—Ç–∫–∏\"\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å /cancel"
    )
    cancel_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer(comfort_text, reply_markup=cancel_kb)
    await state.set_state(FSMFillForm.obrsahenie)

@router.message(StateFilter(FSMFillForm.obrsahenie), F.text)
async def forward_to_admin(message: Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "/cancel", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        await message.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_kb)
        await state.clear()
        return

    try:
        success = await forward_to_admins(
            message,
            f"üì© –ë—ã—Ç–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or message.from_user.full_name} (ID: {message.from_user.id}):\n\n{message.text}"
        )
        if success:
            await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=main_kb)
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await state.clear()

@router.message(F.text == "üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–∏—Ä–µ–∫—Ü–∏–µ–π –§–æ—Ä—É–º–∞")
async def directorate(message: Message):
    directorate_text = (
        "–°–º–æ—Ç—Ä–∏, –∫–∞–∫–∏–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –ª—é–¥–∏ —Å–æ–∑–¥–∞—é—Ç –Ω–∞—à –§–æ—Ä—É–º! "
        "–ï—Å–ª–∏ –±—É–¥–µ—à—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å –∏—Ö, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –∏—Ö —Ä–∞–±–æ—Ç—É üòâ\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å–ª—É–∂–±—É:"
    )
    await message.answer(directorate_text, reply_markup=section_keyboard())

@router.callback_query(F.data.startswith("section:"))
async def show_section(callback: CallbackQuery):
    try:
        section_id = callback.data.split(":")[1]
        name = SECTIONS.get(section_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        text = section_data.get(section_id, "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")

        await callback.message.answer(f"üìå <b>{name}</b>\n\n{text}", parse_mode="HTML")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        photo_data = load_photo_data()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ
        if section_id == "directorate":
            file_ids = photo_data.get("directorate", [])
        else:
            file_ids = photo_data.get("sections", {}).get(section_id, [])

        if not file_ids:
            await callback.message.answer("‚ùå –§–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return

        media = []
        for i, file_id in enumerate(file_ids):
            if i == 0:
                media.append(InputMediaPhoto(
                    media=file_id,
                    caption=f"{name} (—Ñ–æ—Ç–æ {i + 1}/{len(file_ids)})"
                ))
            else:
                media.append(InputMediaPhoto(media=file_id))

        await callback.message.answer_media_group(media)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ü–∏–∏: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
    await callback.answer()

@router.message(F.text == "üçΩ –£–∑–Ω–∞—Ç—å, —á–µ–º —Å–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º—è—Ç")
async def show_menu(message: Message):
    try:
        menu_text = "–í–æ—Ç –º–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!\n\n"

        if MENU_FILE.exists():
            menu_text += MENU_FILE.read_text(encoding="utf-8").strip()
        else:
            menu_text += "–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ."

        await message.answer(menu_text)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        photo_data = load_photo_data()
        menu_photo_id = photo_data.get("menu")
        
        if menu_photo_id:
            await message.answer_photo(menu_photo_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é.")

# ===== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ =====

# ===== –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û –î–ò–†–ï–ö–¶–ò–ò =====
@router.message(Command("upload_director_photos"))
async def upload_director_photos(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ
    if set_directorate([]):
        await message.answer(
            "‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã.\n"
            "üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É. "
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done\n\n"
            "–§–æ—Ç–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª –¥–∏—Ä–µ–∫—Ü–∏–∏."
        )
        await state.set_state(UploadDirectorPhotos.waiting_for_photos)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ü–∏–∏.")

@router.message(UploadDirectorPhotos.waiting_for_photos, F.photo)
async def save_director_photo(message: Message, state: FSMContext):
    try:
        file_id = message.photo[-1].file_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        photo_data = load_photo_data()
        photo_data["directorate"].append(file_id)
        if save_photo_data(photo_data):
            count = len(photo_data.get("directorate", []))
            await message.answer(f"‚úÖ –§–æ—Ç–æ {count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª –¥–∏—Ä–µ–∫—Ü–∏–∏.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")

@router.message(Command("done"), UploadDirectorPhotos.waiting_for_photos)
async def finish_director_upload(message: Message, state: FSMContext):
    photo_data = load_photo_data()
    count = len(photo_data.get("directorate", []))
    await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {count} —Ñ–æ—Ç–æ.")
    await state.clear()

@router.message(Command("addinfo"))
async def add_info_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    kb = InlineKeyboardBuilder()
    for k, v in SECTIONS.items():
        kb.button(text=v, callback_data=f"admin_set:{k}")
    kb.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb.as_markup())
    await state.set_state(AddInfo.waiting_for_section)

@router.callback_query(F.data.startswith("admin_set:"), AddInfo.waiting_for_section)
async def admin_select_section(callback: CallbackQuery, state: FSMContext):
    section_id = callback.data.split(":")[1]
    await state.update_data(section_id=section_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è:")
    await state.set_state(AddInfo.waiting_for_text)
    await callback.answer()

@router.message(AddInfo.waiting_for_text)
async def admin_set_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /done")
    await state.set_state(AddInfo.waiting_for_photos)

@router.message(AddInfo.waiting_for_photos, F.photo)
async def admin_save_photos(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        section_id = data["section_id"]
        file_id = message.photo[-1].file_id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Å–µ–∫—Ü–∏—é
        if add_section_photo(section_id, file_id):
            photo_data = load_photo_data()
            file_ids = photo_data.get("sections", {}).get(section_id, [])
            count = len(file_ids)
            await message.answer(f"‚úÖ –§–æ—Ç–æ {count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")

@router.message(Command("done"), AddInfo.waiting_for_photos)
async def admin_done_uploading(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        section_id = data["section_id"]
        section_data[section_id] = data["text"]
        
        if save_info():
            photo_data = load_photo_data()
            file_ids = photo_data.get("sections", {}).get(section_id, [])
            count = len(file_ids)
            await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏ {count} —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    await state.clear()

# –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–û–í
@router.message(Command("addadmin"))
async def add_admin(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    if not message.reply_to_message:
        return await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.")
    new_admin_id = message.reply_to_message.from_user.id
    if new_admin_id in ADMIN_IDS:
        return await message.answer("‚úÖ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")
    ADMIN_IDS.append(new_admin_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")

@router.message(Command("listadmins"))
async def list_admins(message: Message):
    if not is_admin(message.from_user.id):
        return
    admins = "\n".join(str(i) for i in ADMIN_IDS)
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins}")

# –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ú–ï–ù–Æ
@router.message(Command("setmenu"))
async def set_menu_start(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    await message.answer("üìÑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é.")

@router.message(F.text, Command("setmenu"))
async def set_menu_text(message: Message):
    try:
        MENU_FILE.write_text(message.text.strip(), encoding="utf-8")
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–Ω—é.")

@router.message(F.photo, Command("setmenu"))
async def set_menu_photo(message: Message):
    try:
        file_id = message.photo[-1].file_id
        if set_menu(file_id):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            if await save_media_file(file_id, MENU_DIR, "current_menu.jpg"):
                await message.answer("‚úÖ –§–æ—Ç–æ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            else:
                await message.answer("‚úÖ –§–æ—Ç–æ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ –º–µ–Ω—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –º–µ–Ω—é: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")

@router.message(Command("helpadmin"))
async def help_admin(message: Message):
    if not is_admin(message.from_user.id):
        return
    await message.answer(
        "üõ† –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
        "/addinfo ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ —Ä–∞–∑–¥–µ–ª–æ–≤\n"
        "/setfaq ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å FAQ\n"
        "/setmap ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É\n"
        "/setmenu ‚Äî —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –º–µ–Ω—é\n"
        "/setprogram ‚Äî —Ñ–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
        "/addadmin ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "/listadmins ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤\n"
        "/view_appeals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
        "/upload_director_photos ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ü–∏–∏\n"
        "/shutdown ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
        "/done ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ"
    )

# ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ =====
async def shutdown():
    global bot
    if bot:
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(admin_id, "üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
                except:
                    pass

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            await bot.session.close()
            logger.info("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    else:
        logger.warning("–ë–æ—Ç –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    # –£–¥–∞–ª—è–µ–º PID-—Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if PID_FILE.exists():
        try:
            PID_FILE.unlink()
            logger.info("PID-—Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è PID-—Ñ–∞–π–ª–∞: {e}")

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    global bot

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or len(BOT_TOKEN) < 30 or ":" not in BOT_TOKEN:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞! –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '123456789:ABCdefGHIjklMnOpQRSTuVWXyz'")
        return

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        load_info()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        bot = Bot(token=BOT_TOKEN, session_timeout=30)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            me = await bot.get_me()
            logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} (ID: {me.id})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            logger.error("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
            logger.error("2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Telegram —Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            logger.error("3. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher()
        dp.include_router(router)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, —Ä–µ–∂–∏–º polling")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            return

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await dp.start_polling(bot, close_bot_session=True)

    except asyncio.CancelledError:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await shutdown()

# ===== –¢–û–ß–ö–ê –í–•–û–î–ê =====
if __name__ == "__main__":
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    def handle_exit(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        loop = asyncio.get_event_loop()
        if loop.is_running():
            loop.create_task(shutdown())
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, handle_exit)
    signal.signal(signal.SIGTERM, handle_exit)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        if PID_FILE.exists():
            with open(PID_FILE, "r") as f:
                old_pid = int(f.read().strip())
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å (–¥–ª—è Linux)
            if sys.platform != "win32" and os.path.exists(f"/proc/{old_pid}"):
                logger.error("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä.")
                sys.exit(1)
            else:
                # –î–ª—è Windows –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª
                PID_FILE.unlink()
                logger.warning("–£–¥–∞–ª–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π PID-—Ñ–∞–π–ª")
                
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        with open(PID_FILE, "w") as f:
            f.write(str(os.getpid()))
            
        asyncio.run(main())
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
    finally:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ shutdown –≤—ã–ø–æ–ª–Ω–µ–Ω
        if PID_FILE.exists():
            try:
                PID_FILE.unlink()
            except:
                pass
