import asyncio
import os
import atexit
import logging
import json
from pathlib import Path
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, CallbackQuery, InputMediaPhoto
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

BASE_DIR = Path(__file__).resolve().parent
load_dotenv(dotenv_path=BASE_DIR / '.env', override=True)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
    if not BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã")
    else:
        logger.error(f"–¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: {BOT_TOKEN}")
    exit(1)

ADMIN_IDS = [834553662, 553588882, 2054326653, 1852003919, 966420322, 1852003919, 834553662]

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
FAQ_FILE = BASE_DIR / "faq.txt"
MAP_FILE = BASE_DIR / "map.txt"  # –¢–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º file_id
MENU_FILE = BASE_DIR / "menu.txt"
INFO_FILE = BASE_DIR / "section_info.txt"
PHOTO_DATA_FILE = BASE_DIR / "photo_data.json"  # –•—Ä–∞–Ω–∏–ª–∏—â–µ file_id

bot = None


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
def load_photo_data():
    if PHOTO_DATA_FILE.exists():
        try:
            with open(PHOTO_DATA_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return {}
    return {
        "sections": {},
        "program": [],
        "directorate": [],
        "map": None,
        "menu": None
    }


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ
def save_photo_data(data):
    with open(PHOTO_DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
photo_data = load_photo_data()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM

class SetMenu(StatesGroup):
    waiting_for_content = State()

class FSMFillForm(StatesGroup):
    obrsahenie = State()


class UploadDirectorPhotos(StatesGroup):
    waiting_for_photos = State()


class AddInfo(StatesGroup):
    waiting_for_section = State()
    waiting_for_text = State()
    waiting_for_photos = State()


class SetFAQ(StatesGroup):
    waiting_for_text = State()


class SetProgram(StatesGroup):
    waiting_for_photos = State()


# –°–µ–∫—Ü–∏–∏
SECTIONS = {
    "vneucheb": "–í–Ω–µ—É—á–µ–±–Ω–∞—è —Å–ª—É–∂–±–∞",
    "edu": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞",
    "food": "–°–ª—É–∂–±–∞ –ø–∏—Ç–∞–Ω–∏—è",
    "accom": "–°–ª—É–∂–±–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
    "members": "–°–ª—É–∂–±–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏",
    "partners": "–†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
    "escato": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≠–°–ö–ê–¢–û",
    "event": "–ò–≤–µ–Ω—Ç —Å–ª—É–∂–±–∞ —Ñ–æ—Ä—É–º–∞",
    "finance_partners": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã",
    "education": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "tech": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞",
    "directorate_staff": "–®—Ç–∞–± –î–∏—Ä–µ–∫—Ü–∏–∏",
    "field": "–ü–æ–ª–µ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "protocol": "–ü—Ä–æ—Ç–æ–∫–æ–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞",
    "press_service": "–ü—Ä–µ—Å—Å-—Å–ª—É–∂–±–∞"
}

APPEALS_FILE = BASE_DIR / "appeals.txt"

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
router = Router()
section_data = {}


# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


def load_info():
    if INFO_FILE.exists():
        with open(INFO_FILE, "r", encoding="utf-8") as f:
            for line in f:
                parts = line.strip().split("||", 1)
                if len(parts) == 2:
                    key, text = parts
                    section_data[key] = text


def save_info():
    with open(INFO_FILE, "w", encoding="utf-8") as f:
        for key, text in section_data.items():
            f.write(f"{key}||{text}\n")


async def forward_to_admins(message: Message, text: str):
    with open(APPEALS_FILE, "a", encoding="utf-8") as f:
        f.write(f"{message.date.isoformat()}||{message.from_user.id}||{message.from_user.full_name}||{message.text}\n")

    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")


# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="üè° –ü–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ")],
        [KeyboardButton(text="üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–∏—Ä–µ–∫—Ü–∏–µ–π –§–æ—Ä—É–º–∞")],
        [KeyboardButton(text="üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="üçΩ –£–∑–Ω–∞—Ç—å, —á–µ–º —Å–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º—è—Ç")],
        [KeyboardButton(text="üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å")],
    ],
    resize_keyboard=True
)


def section_keyboard():
    kb = InlineKeyboardBuilder()
    for key, name in SECTIONS.items():
        kb.button(text=name, callback_data=f"section:{key}")
    kb.adjust(2)
    return kb.as_markup()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
@router.message(Command("setfaq"))
async def set_faq(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    await message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ —Ü–µ–ª–∏–∫–æ–º:")
    await state.set_state(SetFAQ.waiting_for_text)


@router.message(SetFAQ.waiting_for_text)
async def save_faq_text(message: Message, state: FSMContext):
    try:
        FAQ_FILE.write_text(message.text.strip(), encoding="utf-8")
        await message.answer("‚úÖ FAQ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FAQ: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å FAQ.")
    await state.clear()


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ì–†–ê–ú–ú–´ –ù–ê –î–ï–ù–¨ =====
@router.message(F.text == "üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å")
async def daily_program(message: Message):
    try:
        program_photos = photo_data.get("program", [])

        if not program_photos:
            await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return

        media = []
        for i, file_id in enumerate(program_photos):
            if i == 0:
                media.append(InputMediaPhoto(
                    media=file_id,
                    caption="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å üåû"
                ))
            else:
                media.append(InputMediaPhoto(media=file_id))

        await message.answer_media_group(media)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")


# ===== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–†–û–ì–†–ê–ú–ú–´ =====
@router.message(Command("setprogram"))
async def set_program_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ
    photo_data["program"] = []
    save_photo_data(photo_data)

    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –æ–¥–Ω–æ–º—É. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done")
    await state.set_state(SetProgram.waiting_for_photos)


@router.message(SetProgram.waiting_for_photos, F.photo)
async def save_program_photo(message: Message, state: FSMContext):
    try:
        file_id = message.photo[-1].file_id
        photo_data["program"].append(file_id)
        save_photo_data(photo_data)

        count = len(photo_data["program"])
        await message.answer(f"‚úÖ –§–æ—Ç–æ {count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")


@router.message(Command("done"), SetProgram.waiting_for_photos)
async def finish_program_upload(message: Message, state: FSMContext):
    count = len(photo_data["program"])
    await message.answer(f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Ñ–æ—Ç–æ.")
    await state.clear()


# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@router.message(CommandStart())
async def start(message: Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –ø—Ä–∏—Ä–æ–¥—ã! üåø –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ —Ñ–æ—Ä—É–º–µ ¬´–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞. –ó–∞–ø–æ–≤–µ–¥–Ω—ã–π –∫—Ä–∞–π¬ª. "
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n\n"
        "üè° –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ–º —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–º –∂–∏–ª–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ\n"
        "üìù –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É\n"
        "üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤\n"
        "üçΩ –£–∑–Ω–∞—Ç—å, —á–µ–º —Å–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º—è—Ç\n"
        "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –¥–µ–Ω—å\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚Üì"
    )
    await message.answer(welcome_text, reply_markup=main_kb)


@router.message(F.text == "üìù –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
async def faq(message: Message):
    try:
        if FAQ_FILE.exists():
            text = FAQ_FILE.read_text(encoding="utf-8").strip()
        else:
            text = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."

        faq_text = (
            "–ó–¥–µ—Å—å –º—ã —Å–æ–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏, –≤–¥—Ä—É–≥ —Ç—ã –Ω–∞–π–¥–µ—à—å –∑–¥–µ—Å—å –æ—Ç–≤–µ—Ç –¥–ª—è —Å–µ–±—è:\n\n"
            f"{text}\n\n"
            "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏, —Ç–æ –∑–∞–¥–∞–π –µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º –∫–æ–º–∞–Ω–¥—ã"
        )
        await message.answer(faq_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAQ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ.")


@router.message(F.text == "üè° –ü–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ")
async def household_prompt(message: Message, state: FSMContext):
    comfort_text = (
        "–°—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π –ø–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é –∏–ª–∏ –±—ã—Ç—É? –ù–∞–ø–∏—à–∏ –Ω–∞–º, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º–µ:\n"
        "\"–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ—Å—å–±–∞/–æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –§–ò–û, –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã, –Ω–æ–º–µ—Ä –ø–∞–ª–∞—Ç–∫–∏\"\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é, –æ—Ç–ø—Ä–∞–≤—å /cancel"
    )
    cancel_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer(comfort_text, reply_markup=cancel_kb)
    await state.set_state(FSMFillForm.obrsahenie)


@router.message(StateFilter(FSMFillForm.obrsahenie), F.text)
async def forward_to_admin(message: Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "/cancel", "‚ùå –æ—Ç–º–µ–Ω–∞"]:
        await message.answer("‚ùå –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_kb)
        await state.clear()
        return

    try:
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=main_kb)
        user = message.from_user
        await forward_to_admins(
            message,
            f"üì© –ë—ã—Ç–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.full_name} (ID: {user.id}):\n\n{message.text}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await state.clear()


@router.message(F.text == "üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–∏—Ä–µ–∫—Ü–∏–µ–π –§–æ—Ä—É–º–∞")
async def directorate(message: Message):
    directorate_text = (
        "–°–º–æ—Ç—Ä–∏, –∫–∞–∫–∏–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –ª—é–¥–∏ —Å–æ–∑–¥–∞—é—Ç –Ω–∞—à –§–æ—Ä—É–º! "
        "–ï—Å–ª–∏ –±—É–¥–µ—à—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å –∏—Ö, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –∏—Ö —Ä–∞–±–æ—Ç—É üòâ\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å–ª—É–∂–±—É:"
    )
    await message.answer(directorate_text, reply_markup=section_keyboard())


@router.callback_query(F.data.startswith("section:"))
async def show_section(callback: CallbackQuery):
    try:
        section_id = callback.data.split(":")[1]
        name = SECTIONS.get(section_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        text = section_data.get(section_id, "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")

        await callback.message.answer(f"üìå <b>{name}</b>\n\n{text}", parse_mode="HTML")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ
        if section_id == "directorate":
            file_ids = photo_data.get("directorate", [])
        else:
            file_ids = photo_data.get("sections", {}).get(section_id, [])

        if not file_ids:
            await callback.message.answer("‚ùå –§–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return

        media = []
        for i, file_id in enumerate(file_ids):
            if i == 0:
                media.append(InputMediaPhoto(
                    media=file_id,
                    caption=f"{name} (—Ñ–æ—Ç–æ {i + 1}/{len(file_ids)})"
                ))
            else:
                media.append(InputMediaPhoto(media=file_id))

        await callback.message.answer_media_group(media)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ü–∏–∏: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
    await callback.answer()


@router.message(F.text == "üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É")
async def show_map(message: Message):
    try:
        map_text = "–î–µ—Ä–∂–∏ –∫–∞—Ä—Ç—É —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ \"–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞\""
        await message.answer(map_text)

        map_file_id = photo_data.get("map")
        if map_file_id:
            await message.answer_photo(map_file_id)
        else:
            await message.answer("‚ùå –ö–∞—Ä—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç—ã: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É.")


@router.message(F.text == "üçΩ –£–∑–Ω–∞—Ç—å, —á–µ–º —Å–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º—è—Ç")
async def show_menu(message: Message):
    try:
        menu_text = "–í–æ—Ç –º–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!\n\n"

        if MENU_FILE.exists():
            menu_text += MENU_FILE.read_text(encoding="utf-8").strip()
        else:
            menu_text += "–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ."

        await message.answer(menu_text)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –º–µ–Ω—é, –µ—Å–ª–∏ –µ—Å—Ç—å
        menu_photo_id = photo_data.get("menu")
        if menu_photo_id:
            await message.answer_photo(menu_photo_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é.")


# ===== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ =====

# ===== –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û –î–ò–†–ï–ö–¶–ò–ò –û–¢–î–ï–õ–¨–ù–û =====
@router.message(Command("upload_director_photos"))
async def upload_director_photos(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–æ—Ç–æ
    photo_data["directorate"] = []
    save_photo_data(photo_data)

    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –¥–∏—Ä–µ–∫—Ü–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É. "
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done\n\n"
        "–§–æ—Ç–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª –¥–∏—Ä–µ–∫—Ü–∏–∏."
    )
    await state.set_state(UploadDirectorPhotos.waiting_for_photos)


@router.message(UploadDirectorPhotos.waiting_for_photos, F.photo)
async def save_director_photo(message: Message, state: FSMContext):
    try:
        file_id = message.photo[-1].file_id
        photo_data["directorate"].append(file_id)
        save_photo_data(photo_data)

        count = len(photo_data["directorate"])
        await message.answer(f"‚úÖ –§–æ—Ç–æ {count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª –¥–∏—Ä–µ–∫—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")


@router.message(Command("done"), UploadDirectorPhotos.waiting_for_photos)
async def finish_director_upload(message: Message, state: FSMContext):
    count = len(photo_data["directorate"])
    await message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤–ª–µ–Ω–æ {count} —Ñ–æ—Ç–æ.")
    await state.clear()


@router.message(Command("addinfo"))
async def add_info_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    kb = InlineKeyboardBuilder()
    for k, v in SECTIONS.items():
        kb.button(text=v, callback_data=f"admin_set:{k}")
    kb.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb.as_markup())
    await state.set_state(AddInfo.waiting_for_section)


@router.callback_query(F.data.startswith("admin_set:"), AddInfo.waiting_for_section)
async def admin_select_section(callback: CallbackQuery, state: FSMContext):
    section_id = callback.data.split(":")[1]
    await state.update_data(section_id=section_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è:")
    await state.set_state(AddInfo.waiting_for_text)
    await callback.answer()


@router.message(AddInfo.waiting_for_text)
async def admin_set_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /done")
    await state.set_state(AddInfo.waiting_for_photos)


@router.message(AddInfo.waiting_for_photos, F.photo)
async def admin_save_photos(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        section_id = data["section_id"]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if "sections" not in photo_data:
            photo_data["sections"] = {}
        if section_id not in photo_data["sections"]:
            photo_data["sections"][section_id] = []

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id
        file_id = message.photo[-1].file_id
        photo_data["sections"][section_id].append(file_id)
        save_photo_data(photo_data)

        count = len(photo_data["sections"][section_id])
        await message.answer(f"‚úÖ –§–æ—Ç–æ {count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")


@router.message(Command("done"), AddInfo.waiting_for_photos)
async def admin_done_uploading(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        section_id = data["section_id"]
        section_data[section_id] = data["text"]
        save_info()

        count = len(photo_data["sections"].get(section_id, []))
        await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏ {count} —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    await state.clear()


# –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò –£–î–ê–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–û–í
@router.message(Command("addadmin"))
async def add_admin(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    if not message.reply_to_message:
        return await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º.")
    new_admin_id = message.reply_to_message.from_user.id
    if new_admin_id in ADMIN_IDS:
        return await message.answer("‚úÖ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")
    ADMIN_IDS.append(new_admin_id)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")


@router.message(Command("listadmins"))
async def list_admins(message: Message):
    if not is_admin(message.from_user.id):
        return
    admins = "\n".join(str(i) for i in ADMIN_IDS)
    await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n{admins}")


# –£–ü–†–û–©–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ú–ï–ù–Æ, –ö–ê–†–¢–´
@router.message(Command("setmap"))
async def set_map(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    await message.answer("üìé –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã.")


@router.message(F.photo, Command("setmap"))
async def save_map_photo(message: Message):
    try:
        file_id = message.photo[-1].file_id
        photo_data["map"] = file_id
        save_photo_data(photo_data)
        await message.answer("‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç—É.")


@router.message(Command("setmenu"))
async def set_menu_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
    await message.answer(
        "üìÑ –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –º–µ–Ω—é.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
    )
    await state.set_state(SetMenu.waiting_for_content)

@router.message(SetMenu.waiting_for_content, F.text)
async def set_menu_text(message: Message, state: FSMContext):
    try:
        MENU_FILE.write_text(message.text.strip(), encoding="utf-8")
        # –û—á–∏—â–∞–µ–º —Ñ–æ—Ç–æ –º–µ–Ω—é, –µ—Å–ª–∏ –±—ã–ª —Ç–µ–∫—Å—Ç
        photo_data["menu"] = None
        save_photo_data(photo_data)
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–Ω—é: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ–Ω—é.")
    await state.clear()

@router.message(SetMenu.waiting_for_content, F.photo)
async def set_menu_photo(message: Message, state: FSMContext):
    try:
        file_id = message.photo[-1].file_id
        photo_data["menu"] = file_id
        save_photo_data(photo_data)
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –±—ã–ª–æ —Ñ–æ—Ç–æ
        if MENU_FILE.exists():
            MENU_FILE.unlink()
        await message.answer("‚úÖ –§–æ—Ç–æ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –º–µ–Ω—é: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")
    await state.clear()

@router.message(Command("cancel"), SetMenu.waiting_for_content)
async def cancel_menu_update(message: Message, state: FSMContext):
    await message.answer("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    


@router.message(Command("helpadmin"))
async def help_admin(message: Message):
    if not is_admin(message.from_user.id):
        return
    await message.answer(
        "üõ† –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
        "/addinfo ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ —Ä–∞–∑–¥–µ–ª–æ–≤\n"
        "/setfaq ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å FAQ\n"
        "/setmap ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É\n"
        "/setmenu ‚Äî —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –º–µ–Ω—é\n"
        "/setprogram ‚Äî —Ñ–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n"
        "/addadmin ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "/listadmins ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤\n"
        "/view_appeals ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è\n"
        "/upload_director_photos ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–∏—Ä–µ–∫—Ü–∏–∏\n"
        "/shutdown ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
        "/done ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ"
    )


# ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ =====
async def shutdown():
    global bot
    if bot:
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(admin_id, "üî¥ –ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
                except:
                    pass

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            await bot.session.close()
            logger.info("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    else:
        logger.warning("–ë–æ—Ç –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")


# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    global bot

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or len(BOT_TOKEN) < 30 or ":" not in BOT_TOKEN:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞! –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '123456789:ABCdefGHIjklMnOpQRSTuVWXyz'")
        return

    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        load_info()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        bot = Bot(token=BOT_TOKEN, session_timeout=30)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            me = await bot.get_me()
            logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} (ID: {me.id})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            logger.error("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞")
            logger.error("2. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API Telegram —Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
            logger.error("3. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher()
        dp.include_router(router)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            logger.info("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, —Ä–µ–∂–∏–º polling")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
            return

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await dp.start_polling(bot)

    except asyncio.CancelledError:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await shutdown()


# ===== –¢–û–ß–ö–ê –í–•–û–î–ê =====
if __name__ == "__main__":
    atexit.register(lambda: asyncio.run(shutdown()))

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")




