import asyncio
import os
import atexit
import logging
from pathlib import Path
from dotenv import load_dotenv

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ===== –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –°–†–ï–î–´ =====
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(dotenv_path=BASE_DIR / '.env', override=True)
BOT_TOKEN = "8467183577:AAHNGHd1SZspIbAmkewKpYwYlYwih4a8tr4"
ADMIN_IDS = [834553662, 553588882, 2054326653, 1852003919, ]
ADMIN_ID = 834553662

# ===== –ò–ú–ü–û–†–¢–´ –ò–ó AIOGRAM =====
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, CallbackQuery,
    InputMediaPhoto
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–£–¢–ï–ô =====
BASE_PHOTO_DIR = BASE_DIR / "photo_sections"
FAQ_FILE = BASE_DIR / "faq.txt"
MAP_FILE = BASE_DIR / "map.jpg"
MENU_FILE = BASE_DIR / "menu.txt"
INFO_FILE = BASE_DIR / "section_info.txt"

# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
bot = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ–∑–∂–µ

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø =====
class FSMFillForm(StatesGroup):
    obrsahenie = State()

class AddInfo(StatesGroup):
    waiting_for_section = State()
    waiting_for_text = State()
    waiting_for_photos = State()

class SetFAQ(StatesGroup):
    waiting_for_text = State()

class SetProgram(StatesGroup):
    waiting_for_photos = State()

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–ö–¶–ò–ô =====
SECTIONS = {
    # –°—Ç–∞—Ä—ã–µ —Ä–∞–∑–¥–µ–ª—ã
    "vneucheb": "–í–Ω–µ—É—á–µ–±–Ω–∞—è —Å–ª—É–∂–±–∞",
    "edu": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞",
    "food": "–°–ª—É–∂–±–∞ –ø–∏—Ç–∞–Ω–∏—è",
    "accom": "–°–ª—É–∂–±–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
    "members": "–°–ª—É–∂–±–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏",
    "directorate": "–î–∏—Ä–µ–∫—Ü–∏—è —Ñ–æ—Ä—É–º–∞",
    "program_dir": "–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä",
    "find_dir": "–ù–∞–π—Ç–∏-–¥–∏—Ä–µ–∫—Ç–æ—Ä",
    "ahd_dir": "–î–∏—Ä–µ–∫—Ç–æ—Ä –ê–•–ß",
    "activity_dir": "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    "partners": "–†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
    "escato": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≠–°–ö–ê–¢–û",
    "event": "–ò–≤–µ–Ω—Ç —Å–ª—É–∂–±–∞ —Ñ–æ—Ä—É–º–∞",
    "finance_partners": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã",
    "education": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "tech": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞",
    "nonfinance_partners": "–ù–µ—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã",
    "directorate_staff": "–®—Ç–∞–± –î–∏—Ä–µ–∫—Ü–∏–∏",
    "field": "–ü–æ–ª–µ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "protocol": "–ü—Ä–æ—Ç–æ–∫–æ–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞",
    "press_service": "–ü—Ä–µ—Å—Å-—Å–ª—É–∂–±–∞"
}

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
router = Router()
section_data = {}

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def load_info():
    if INFO_FILE.exists():
        with open(INFO_FILE, "r", encoding="utf-8") as f:
            for line in f:
                parts = line.strip().split("||", 1)
                if len(parts) == 2:
                    key, text = parts
                    section_data[key] = text

def save_info():
    with open(INFO_FILE, "w", encoding="utf-8") as f:
        for key, text in section_data.items():
            f.write(f"{key}||{text}\n")

def get_photo_paths(section_id):
    folder = BASE_PHOTO_DIR / section_id
    if not folder.exists():
        return []
    
    return sorted(
        [f for f in folder.iterdir() if f.suffix.lower() in ('.jpg', '.jpeg', '.png')],
        key=lambda f: f.name
    )

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="üè° –ü–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ")],
        [KeyboardButton(text="üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–∏—Ä–µ–∫—Ü–∏–µ–π –§–æ—Ä—É–º–∞")],
        [KeyboardButton(text="üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="üçΩ –£–∑–Ω–∞—Ç—å, —á–µ–º —Å–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º—è—Ç")],
        [KeyboardButton(text="üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å")],
    ],
    resize_keyboard=True
)

def section_keyboard():
    kb = InlineKeyboardBuilder()
    for key, name in SECTIONS.items():
        kb.button(text=name, callback_data=f"section:{key}")
    kb.adjust(2)
    return kb.as_markup()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
@router.message(Command("setfaq"))
async def set_faq(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    await message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ —Ü–µ–ª–∏–∫–æ–º:")
    await state.set_state(SetFAQ.waiting_for_text)

@router.message(SetFAQ.waiting_for_text)
async def save_faq_text(message: Message, state: FSMContext):
    try:
        FAQ_FILE.write_text(message.text.strip(), encoding="utf-8")
        await message.answer("‚úÖ FAQ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FAQ: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å FAQ.")
    await state.clear()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ì–†–ê–ú–ú–´ –ù–ê –î–ï–ù–¨ =====
@router.message(F.text == "üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å")
async def daily_program(message: Message):
    try:
        program_dir = BASE_PHOTO_DIR / "program"
        if not program_dir.exists():
            await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return
            
        photo_paths = get_photo_paths("program")
        
        if not photo_paths:
            await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return
            
        media = []
        for i, path in enumerate(photo_paths):
            if i == 0:
                media.append(InputMediaPhoto(
                    media=FSInputFile(path),
                    caption="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å üåû"
                ))
            else:
                media.append(InputMediaPhoto(
                    media=FSInputFile(path)
                ))
                
        await message.answer_media_group(media)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")

# ===== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–†–û–ì–†–ê–ú–ú–´ =====
@router.message(Command("setprogram"))
async def set_program_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
        
    program_dir = BASE_PHOTO_DIR / "program"
    program_dir.mkdir(exist_ok=True)
    for file in program_dir.glob("*"):
        file.unlink()
        
    await message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –æ–¥–Ω–æ–º—É. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done")
    await state.set_state(SetProgram.waiting_for_photos)

@router.message(SetProgram.waiting_for_photos, F.photo)
async def save_program_photo(message: Message, state: FSMContext):
    try:
        program_dir = BASE_PHOTO_DIR / "program"
        count = len(list(program_dir.glob("*"))) + 1
        path = program_dir / f"{count}.jpg"
        
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        await bot.download_file(file.file_path, destination=path)
        
        await message.answer(f"‚úÖ –§–æ—Ç–æ {count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")

@router.message(Command("done"), SetProgram.waiting_for_photos)
async def finish_program_upload(message: Message, state: FSMContext):
    count = len(list((BASE_PHOTO_DIR / "program").glob("*")))
    await message.answer(f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Ñ–æ—Ç–æ.")
    await state.clear()

# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
@router.message(CommandStart())
async def start(message: Message):
    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å –ø—Ä–∏—Ä–æ–¥—ã! üåø –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –Ω–∞ —Ñ–æ—Ä—É–º–µ ¬´–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞. –ó–∞–ø–æ–≤–µ–¥–Ω—ã–π –∫—Ä–∞–π¬ª. "
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n\n"
        "üè° –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ–º —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–º –∂–∏–ª–æ–º –∫–æ–º–ø–ª–µ–∫—Å–µ\n"
        "üìù –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É\n"
        "üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤\n"
        "üçΩ –£–∑–Ω–∞—Ç—å, —á–µ–º —Å–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º—è—Ç\n"
        "üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –¥–µ–Ω—å\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚Üì"
    )
    await message.answer(welcome_text, reply_markup=main_kb)

@router.message(F.text == "üìù –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")
async def faq(message: Message):
    try:
        if FAQ_FILE.exists():
            text = FAQ_FILE.read_text(encoding="utf-8").strip()
        else:
            text = "‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã."
        
        faq_text = (
            "–ó–¥–µ—Å—å –º—ã —Å–æ–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏, –≤–¥—Ä—É–≥ —Ç—ã –Ω–∞–π–¥–µ—à—å –∑–¥–µ—Å—å –æ—Ç–≤–µ—Ç –¥–ª—è —Å–µ–±—è:\n\n"
            f"{text}\n\n"
            "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏, —Ç–æ –∑–∞–¥–∞–π –µ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞–º –∫–æ–º–∞–Ω–¥—ã"
        )
        await message.answer(faq_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FAQ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ.")

@router.message(F.text == "üè° –ü–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ")
async def household_prompt(message: Message, state: FSMContext):
    comfort_text = (
        "–°—Ç–æ–ª–∫–Ω—É–ª—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π –ø–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—é –∏–ª–∏ –±—ã—Ç—É? –ù–∞–ø–∏—à–∏ –Ω–∞–º, –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ä–º–µ:\n"
        "\"–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å/–ø—Ä–æ—Å—å–±–∞/–æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –§–ò–û, –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã, –Ω–æ–º–µ—Ä –ø–∞–ª–∞—Ç–∫–∏\""
    )
    await message.answer(comfort_text)
    await state.set_state(FSMFillForm.obrsahenie)

@router.message(StateFilter(FSMFillForm.obrsahenie), F.text)
async def forward_to_admin(message: Message, state: FSMContext):
    try:
        await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        user = message.from_user
        await bot.send_message(
            ADMINS_ID,
            f"üì© –ë—ã—Ç–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç @{user.username or user.full_name}:\n\n{message.text}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    await state.clear()

@router.message(F.text == "üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–∏—Ä–µ–∫—Ü–∏–µ–π –§–æ—Ä—É–º–∞")
async def directorate(message: Message):
    directorate_text = (
        "–°–º–æ—Ç—Ä–∏, –∫–∞–∫–∏–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –ª—é–¥–∏ —Å–æ–∑–¥–∞—é—Ç –Ω–∞—à –§–æ—Ä—É–º! "
        "–ï—Å–ª–∏ –±—É–¥–µ—à—å –≤—Å—Ç—Ä–µ—á–∞—Ç—å –∏—Ö, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏ –∑–∞ –∏—Ö —Ä–∞–±–æ—Ç—É üòâ\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å–ª—É–∂–±—É:"
    )
    await message.answer(directorate_text, reply_markup=section_keyboard())
    

@router.callback_query(F.data.startswith("section:"))
async def show_section(callback: CallbackQuery):
    try:
        section_id = callback.data.split(":")[1]
        name = SECTIONS.get(section_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        text = section_data.get(section_id, "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")

        await callback.message.answer(f"üìå <b>{name}</b>\n\n{text}", parse_mode="HTML")

        photo_paths = get_photo_paths(section_id)
        if not photo_paths:
            await callback.message.answer("‚ùå –§–æ—Ç–æ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return

        media = []
        for i, path in enumerate(photo_paths):
            if i == 0:
                media.append(InputMediaPhoto(
                    media=FSInputFile(path),
                    caption=f"{name} (—Ñ–æ—Ç–æ {i+1}/{len(photo_paths)})"
                ))
            else:
                media.append(InputMediaPhoto(
                    media=FSInputFile(path)
                ))
        
        await callback.message.answer_media_group(media)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–µ–∫—Ü–∏–∏: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
    await callback.answer()

@router.message(F.text == "üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É")
async def show_map(message: Message):
    try:
        map_text = "–î–µ—Ä–∂–∏ –∫–∞—Ä—Ç—É —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ \"–≠–∫–æ—Å–∏—Å—Ç–µ–º–∞\""
        await message.answer(map_text)

        if MAP_FILE.exists():
            await message.answer_photo(FSInputFile(MAP_FILE))
        else:
            await message.answer("‚ùå –ö–∞—Ä—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç—ã: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É.")

@router.message(F.text == "üçΩ –£–∑–Ω–∞—Ç—å, —á–µ–º —Å–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º—è—Ç")
async def show_menu(message: Message):
    try:
        menu_text = "–í–æ—Ç –º–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!\n\n"
        
        if MENU_FILE.exists():
            menu_text += MENU_FILE.read_text(encoding="utf-8").strip()
        else:
            menu_text += "–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ."
        
        await message.answer(menu_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é.")

# ===== –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ =====
@router.message(Command("addinfo"))
async def add_info_start(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    kb = InlineKeyboardBuilder()
    for k, v in SECTIONS.items():
        kb.button(text=v, callback_data=f"admin_set:{k}")
    kb.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb.as_markup())
    await state.set_state(AddInfo.waiting_for_section)

@router.callback_query(F.data.startswith("admin_set:"), AddInfo.waiting_for_section)
async def admin_select_section(callback: CallbackQuery, state: FSMContext):
    section_id = callback.data.split(":")[1]
    await state.update_data(section_id=section_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è:")
    await state.set_state(AddInfo.waiting_for_text)
    await callback.answer()

@router.message(AddInfo.waiting_for_text)
async def admin_set_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É (JPG/PNG). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /done")
    await state.set_state(AddInfo.waiting_for_photos)

@router.message(AddInfo.waiting_for_photos, F.photo)
async def admin_save_photos(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        section_id = data["section_id"]
        folder = BASE_PHOTO_DIR / section_id
        folder.mkdir(parents=True, exist_ok=True)

        photo = message.photo[-1]
        count = len(list(folder.glob("*"))) + 1
        path = folder / f"{count}.jpg"
        
        file = await bot.get_file(photo.file_id)
        await bot.download_file(file.file_path, destination=path)
        
        await message.answer(f"‚úÖ –§–æ—Ç–æ {count} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ.")

@router.message(Command("done"), AddInfo.waiting_for_photos)
async def admin_done_uploading(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        section_data[data["section_id"]] = data["text"]
        save_info()
        await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    await state.clear()

# ===== –ó–ê–í–ï–†–®–ï–ù–ò–ï –†–ê–ë–û–¢–´ =====
async def shutdown():
    if bot:
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
        try:
            await bot.session.close()
            logger.info("–°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
    else:
        logger.warning("–ë–æ—Ç –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    global bot
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or len(BOT_TOKEN) != 46:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –î–ª–∏–Ω–∞: {len(BOT_TOKEN) if BOT_TOKEN else 0}")
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
    BASE_PHOTO_DIR.mkdir(parents=True, exist_ok=True)
    (BASE_PHOTO_DIR / "directorate").mkdir(exist_ok=True)
    (BASE_PHOTO_DIR / "program").mkdir(exist_ok=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    load_info()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=BOT_TOKEN)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        me = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{me.username} (ID: {me.id})")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher()
        dp.include_router(router)
        
        # –ó–∞–ø—É—Å–∫
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
    finally:
        await shutdown()

# ===== –¢–û–ß–ö–ê –í–•–û–î–ê =====
if __name__ == "__main__":
    atexit.register(lambda: asyncio.run(shutdown()))

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")



