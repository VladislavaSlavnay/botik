import asyncio
import os
import atexit
import logging
from pathlib import Path
from dotenv import load_dotenv

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ===== –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –°–†–ï–î–´ =====
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(dotenv_path=BASE_DIR / '.env', override=True)
BOT_TOKEN = "8467183577:AAF_lfrVZmnL1jIlQRpeVmoV5WFEGs4T4Gw"
ADMIN_IDS = [834553662, 553588882, 2054326653, 1852003919, 966420322]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# ===== –ò–ú–ü–û–†–¢–´ –ò–ó AIOGRAM =====
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, CallbackQuery,
    InputMediaPhoto
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, CommandStart, StateFilter

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ü–£–¢–ï–ô =====
BASE_PHOTO_DIR = BASE_DIR / "photo_sections"
FAQ_FILE = BASE_DIR / "faq.txt"
MAP_FILE = BASE_DIR / "map.jpg"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å
MENU_FILE = BASE_DIR / "menu.txt"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å
INFO_FILE = BASE_DIR / "section_info.txt"

# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =====
bot = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ–∑–∂–µ

# ===== –°–û–°–¢–û–Ø–ù–ò–Ø =====
class FSMFillForm(StatesGroup):
    obrsahenie = State()

class AddInfo(StatesGroup):
    waiting_for_section = State()
    waiting_for_text = State()
    waiting_for_photos = State()

class SetFAQ(StatesGroup):
    waiting_for_text = State()

class SetProgram(StatesGroup):
    waiting_for_photos = State()

class SetMenu(StatesGroup):  # –ù–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–µ–Ω—é
    waiting_for_content = State()

class SetMap(StatesGroup):  # –ù–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–∞—Ä—Ç—ã
    waiting_for_map = State()

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–ö–¶–ò–ô =====
SECTIONS = {
    "vneucheb": "–í–Ω–µ—É—á–µ–±–Ω–∞—è —Å–ª—É–∂–±–∞",
    "edu": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞", 
    "food": "–°–ª—É–∂–±–∞ –ø–∏—Ç–∞–Ω–∏—è",
    "accom": "–°–ª—É–∂–±–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
    "members": "–°–ª—É–∂–±–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏",
    "directorate": "–î–∏—Ä–µ–∫—Ü–∏—è —Ñ–æ—Ä—É–º–∞",
    "program_dir": "–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä",
    "find_dir": "–ù–∞–π—Ç–∏-–¥–∏—Ä–µ–∫—Ç–æ—Ä",
    "ahd_dir": "–î–∏—Ä–µ–∫—Ç–æ—Ä –ê–•–ß",
    "activity_dir": "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
    "partners": "–†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏",
    "escato": "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≠–°–ö–ê–¢–û",
    "event": "–ò–≤–µ–Ω—Ç —Å–ª—É–∂–±–∞ —Ñ–æ—Ä—É–º–∞",
    "finance_partners": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã",
    "education": "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "tech": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞",
    "nonfinance_partners": "–ù–µ—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã",
    "directorate_staff": "–®—Ç–∞–± –î–∏—Ä–µ–∫—Ü–∏–∏",
    "field": "–ü–æ–ª–µ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞",
    "protocol": "–ü—Ä–æ—Ç–æ–∫–æ–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞",
    "press_service": "–ü—Ä–µ—Å—Å-—Å–ª—É–∂–±–∞"
}

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
router = Router()
section_data = {}

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

def load_info():
    if INFO_FILE.exists():
        with open(INFO_FILE, "r", encoding="utf-8") as f:
            for line in f:
                parts = line.strip().split("||", 1)
                if len(parts) == 2:
                    key, text = parts
                    section_data[key] = text

def save_info():
    with open(INFO_FILE, "w", encoding="utf-8") as f:
        for key, text in section_data.items():
            f.write(f"{key}||{text}\n")

def get_photo_paths(section_id):
    folder = BASE_PHOTO_DIR / section_id
    if not folder.exists():
        return []
    
    return sorted(
        [f for f in folder.iterdir() if f.suffix.lower() in ('.jpg', '.jpeg', '.png')],
        key=lambda f: f.name
    )

async def forward_to_admins(message: Message, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã")],
        [KeyboardButton(text="üè° –ü–æ–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –∫–æ–º—Ñ–æ—Ä—Ç–µ –≤ –≥–ª—ç–º–ø–∏–Ω–≥–µ")],
        [KeyboardButton(text="üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥–∏—Ä–µ–∫—Ü–∏–µ–π –§–æ—Ä—É–º–∞")],
        [KeyboardButton(text="üó∫ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="üçΩ –£–∑–Ω–∞—Ç—å, —á–µ–º —Å–µ–≥–æ–¥–Ω—è –∫–æ—Ä–º—è—Ç")],
        [KeyboardButton(text="üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å")],
    ],
    resize_keyboard=True
)

def section_keyboard():
    kb = InlineKeyboardBuilder()
    for key, name in SECTIONS.items():
        kb.button(text=name, callback_data=f"section:{key}")
    kb.adjust(2)
    return kb.as_markup()

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î =====
@router.message(Command("setfaq"))
async def set_faq(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    await message.answer("‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç FAQ —Ü–µ–ª–∏–∫–æ–º:")
    await state.set_state(SetFAQ.waiting_for_text)

@router.message(SetFAQ.waiting_for_text)
async def save_faq_text(message: Message, state: FSMContext):
    try:
        FAQ_FILE.write_text(message.text.strip(), encoding="utf-8")
        await message.answer("‚úÖ FAQ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è FAQ: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å FAQ.")
    await state.clear()

# ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–û–ì–†–ê–ú–ú–´ –ù–ê –î–ï–ù–¨ =====
@router.message(F.text == "üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å")
async def daily_program(message: Message):
    try:
        program_dir = BASE_PHOTO_DIR / "program"
        if not program_dir.exists():
            await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return
            
        photo_paths = get_photo_paths("program")
        
        if not photo_paths:
            await message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return
            
        media = []
        for i, path in enumerate(photo_paths):
            if i == 0:
                media.append(InputMediaPhoto(
                    media=FSInputFile(path),
                    caption="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ –¥–µ–Ω—å üåû"
                ))
            else:
                media.append(InputMediaPhoto(
                    media=FSInputFile(path)
                ))
                
        await message.answer_media_group(media)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")

# ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–†–û–ì–†–ê–ú–ú–´ =====
@router.message(Command("setprogram"))
async def set_program_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
        
    program_dir = BASE_PHOTO_DIR / "program"
    program_dir.mkdir(exist_ok=True)
    for file in program_dir.glob("*"):
        file.unlink()
        
    await message.answer(
        "üìÖ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 4 —Ñ–æ—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–Ω—è <b>–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</b>\n"
        "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="HTML"
    )
    await state.set_state(SetProgram.waiting_for_photos)

@router.message(SetProgram.waiting_for_photos, F.media_group_id, F.photo)
async def save_program_album(message: Message, album: list[Message], state: FSMContext):
    try:
        program_dir = BASE_PHOTO_DIR / "program"
        
        for i, msg in enumerate(album[:4]):
            photo = msg.photo[-1]
            path = program_dir / f"{i+1}.jpg"
            file = await bot.get_file(photo.file_id)
            await bot.download_file(file.file_path, destination=path)

        await message.answer(f"‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(album)} —Ñ–æ—Ç–æ.")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.message(Command("cancel"), SetProgram.waiting_for_photos)
async def cancel_program_update(message: Message, state: FSMContext):
    await message.answer("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()

# ===== –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ú–ï–ù–Æ =====
@router.message(Command("setmenu"))
async def set_menu_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    await message.answer(
        "üçΩ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ç–µ–∫—Å—Ç –º–µ–Ω—é</b> –∏–ª–∏ <b>—Ñ–æ—Ç–æ —Å –º–µ–Ω—é</b>\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
        "- –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "- –û–¥–Ω–æ —Ñ–æ—Ç–æ\n"
        "- –ê–ª—å–±–æ–º –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ\n\n"
        "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="HTML"
    )
    await state.set_state(SetMenu.waiting_for_content)

@router.message(SetMenu.waiting_for_content, F.text)
async def save_menu_text(message: Message, state: FSMContext):
    MENU_FILE.write_text(message.text, encoding="utf-8")
    await message.answer("‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    await state.clear()

@router.message(SetMenu.waiting_for_content, F.photo)
async def save_menu_photo(message: Message, state: FSMContext):
    try:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        await bot.download_file(file.file_path, destination=MENU_FILE.with_suffix('.jpg'))
        
        await message.answer("‚úÖ –ú–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ —Ñ–æ—Ç–æ!")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("cancel"), SetMenu.waiting_for_content)
async def cancel_menu_update(message: Message, state: FSMContext):
    await message.answer("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()

# ===== –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ê–†–¢–´ =====
@router.message(Command("setmap"))
async def set_map_start(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
        
    await message.answer(
        "üó∫ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –∫–∞–∫ <b>—Ñ–∞–π–ª</b> (–Ω–µ –∫–∞–∫ —Ñ–æ—Ç–æ!)\n"
        "–ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode="HTML"
    )
    await state.set_state(SetMap.waiting_for_map)

@router.message(SetMap.waiting_for_map, F.document)
async def save_map_file(message: Message, state: FSMContext):
    try:
        await bot.download(
            message.document,
            destination=MAP_FILE
        )
        await message.answer("‚úÖ –ö–∞—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()

@router.message(Command("cancel"), SetMap.waiting_for_map)
async def cancel_map_update(message: Message, state: FSMContext):
    await message.answer("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()

# ===== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =====
# ... (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    global bot
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if not BOT_TOKEN or len(BOT_TOKEN) < 30 or ":" not in BOT_TOKEN:
        logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞! –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ '123456789:ABCdefGHIjklMnOpQRSTuVWXyz'")
        return

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
        BASE_PHOTO_DIR.mkdir(parents=True, exist_ok=True)
        for section in SECTIONS.keys():
            (BASE_PHOTO_DIR / section).mkdir(exist_ok=True)
        (BASE_PHOTO_DIR / "program").mkdir(exist_ok=True)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        load_info()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = Bot(token=BOT_TOKEN, session_timeout=30)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            me = await bot.get_me()
            logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω: @{me.username} (ID: {me.id})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API: {e}")
            return

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher()
        dp.include_router(router)
        
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await shutdown()

if __name__ == "__main__":
    atexit.register(lambda: asyncio.run(shutdown()))
    try:
        asyncio.run(main())
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
